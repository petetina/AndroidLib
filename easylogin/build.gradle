apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

//To publish aar
apply plugin: 'maven-publish'

android {
    compileSdkVersion 28



    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28
        versionCode Integer.parseInt(project.LIBRARY_VERSION_CODE)
        versionName project.LIBRARY_VERSION_NAME

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }

}

ext {
    supportVersion = '28.0.0'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    // notice that the compiler version must be the same than our gradle version
    kapt "androidx.databinding:databinding-compiler:$gradle_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //All needed libraries for our library

    //Facebook
    implementation 'com.facebook.android:facebook-android-sdk:4.38.1'

    // Google Play Services
    implementation 'com.google.android.gms:play-services-auth:16.0.1'

    // GSON
    implementation 'com.google.code.gson:gson:2.8.5'
}


//Add this for gradle publish task
publishing {
    publications {
        aar(MavenPublication) {
            groupId 'fr.hardis'
            artifactId 'easylogin'
            //version '0.01-alpha'
            version project.LIBRARY_VERSION_NAME
            //artifact("$buildDir/outputs/aar/easylogin-release.aar")

            //Add librairies dependencies to generated pom.xml, else we will get a NoClassDefFoundError exception
            pom.withXml {
                //Get all dependencies from dependencies section
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.getByName("archives").allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
        }
    }
    repositories {
        maven {
            url 'https://pkgs.dev.azure.com/antoinepetetin/_packaging/HardisRepositories/maven/v1'
            credentials {
                username "AZURE_ARTIFACTS"
                //This token will expire on 19/03/2019
                password project.AZURE_TOKEN
            }
        }
    }
}